module.exports = {
    createRoomDto: function (roomName, playersArr, movieData, gameRulesOptions) {
        var room =
 {
            "RoomName" : roomName,
            "StartedOn": Date.now(),
            "CompletedOn" : "",
            "Players": playersArr,
            "Winner": "",
            "GameRules": gameRulesOptions,
            "MovieData" : movieData,
            "CreatedBy" : playersArr.PlayerName,
            "CurrentRound" : 0,
            "LastMovePlayedBy" : ""
        };
        
        return room;
    },
    createPlayerDto: function (playerName) {
        var player =
 {
            "PlayerName" : playerName,
            "CurrentScore" : 0
        };
        
        return player;
    },
    gameData : function (request, cheerio, fs, callback) {
        var urlToScrape = 'http://www.imdb.com/chart/top?ref_=nb_mv_3_chttp';
        var movies = [];
        
        request(urlToScrape, function (error, response, html) {
            if (!error) {
                var $ = cheerio.load(html);
                
                var title, release, rating, rank, imgUrl;
                
                $('tbody.lister-list tr').each(function () {
                    imgUrl = $(this).find('td.posterColumn').find('img').attr('src');
                    var data = $(this).find('td.titleColumn');
                    title = data.children(1).text();
                    
                    release = data.children().last().text();
                    release = release.replace('(', '').replace(')', '').replace('/I', '');
                    
                    rating = data.children().first().attr('data-value');
                    
                    rank = data.children().first().text();
                    rank = rank.replace('.', '');
                    
                    var imgPrefix = imgUrl.split("V1_")[0];
                    
                    //Resizes the IMDB thumbnails to a more respectable size.
                    imgUrl = imgPrefix + "V1_SY317_CR2,0,214,317_AL_.jpg";
                    
                    movies.push({
                        title: title, 
                        release: release, 
                        rating: rating, 
                        rank : rank, 
                        imgUrl : imgUrl
                    });
                });

                fs.writeFile("movies.json", JSON.stringify(movies, null, 4));
                callback(movies);
            } else {
                movies = require('../movies.json');
                callback(movies);
            }
        });
        
        //return movies;
    },
    getRandomMovieList : function (numberOfMoviesToReturn, moviesList) {
        var utils = require("./utils.js");
        
        var shuffledMovieArray = utils.shuffleArray(moviesList);
        var newMovieArray = [];
        
        for (var i = 0; i < numberOfMoviesToReturn; i++) {
            newMovieArray.push(shuffledMovieArray[i]);
        }
        
        return newMovieArray;
    },
    getAvailableRooms : function (rooms, playerName) {
        var maxRoomsToReturn = 5;
        var maxPlayers = 2;
        var availableRooms = [];
        
        for (var i = 0; i < rooms.length; i++) {
            if (rooms[i].Winner == "" && availableRooms.length <= maxRoomsToReturn) {
                if (rooms[i].Players.length < maxPlayers && rooms[i].Players[0].PlayerName !== playerName) {
                    availableRooms.push(rooms[i]);
                }
            }
        }
        
        return availableRooms;
    },
    joinRoom : function (rooms, roomName, playerName, gameRules) {
        var roomToJoin = {};
        var existingPlayerIndex = -1;
        
        if (rooms.length == 0) {
            var newPlayer = this.createRoomDto(playerName);
            this.createRoomDto(roomName, [newPlayer], this.gameData, gameRules);
        } else {
            for (var i = 0; i < rooms.length; i++) {
                //Does a room with this name exist?
                if (rooms[i].RoomName == roomName) {
                    roomToJoin = rooms[i];
                    break;
                }
            }
            
            //Room was found with a matching name, let's join it.
            if (roomToJoin != null) {
                for (var j = 0; j < roomToJoin.Players.length; j++) {
                    var playerInRoom = roomToJoin.Players.length;
                    
                    if (playerInRoom.PlayerName === playerName) {
                        existingPlayerIndex = j;
                        break;
                    }
                }
                
                //No player found with matching name, add them to the room.
                if (existingPlayerIndex == -1) {
                    roomToJoin.Players.push(this.createPlayerDto(playerName));
                } else {
                    roomToJoin.Players[existingPlayerIndex] = this.createPlayerDto(playerName);
                }
            }
        }
        
        return roomToJoin;
    },
    getRoom : function (rooms, roomNameToget) {
        var result = 0;
        
        for (var i = 0; i < rooms.length; i++) {
            //Does a room with this name exist?
            if (rooms[i].RoomName == roomNameToget) {
                result = i;
                break;
            }
        }
        return result;
    }
};